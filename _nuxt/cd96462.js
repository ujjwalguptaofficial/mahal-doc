(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{212:function(e,n,t){"use strict";t.r(n);var l={components:{Layout:t(176).a}},r=t(14),component=Object(r.a)(l,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Layout",{attrs:{title:"Directive",description:"Directive are reusable method which can be attached on element for low level access to element.",keywords:"directive, element, mahal",contentSrc:"/home/runner/work/mahal-doc/mahal-doc/content/docs/basic/directive.md"}},[t("h1",{attrs:{id:"directive"}},[e._v("Directive")]),e._v(" "),t("p",[e._v("Directive are reusable method which can be attached on element for low level access to element. Similar to component - they have lifecycle. ")]),e._v(" "),t("p",[e._v("The "),t("code",{pre:!0},[e._v("model")]),e._v(", "),t("code",{pre:!0},[e._v("class")]),e._v(", "),t("code",{pre:!0},[e._v("html")]),e._v(" are examples of directive.")]),e._v(" "),t("p",[e._v("A directive is called before the target element is rendered. The directive has access to element and parameter passed to it. There are three lifecycle for directive - ")]),e._v(" "),t("ol",[t("li",[e._v("inserted - called when target element is inserted into the DOM.")]),e._v(" "),t("li",[e._v("valueUpdated - called when binded parameter value is changed")]),e._v(" "),t("li",[e._v("destroyed - called when target element is removed from DOM.")])]),e._v(" "),t("h2",{attrs:{id:"examples"}},[e._v("Examples")]),e._v(" "),t("p",[t("strong",[e._v("Example1 - Let's create a simple name directive which will set the "),t("code",{pre:!0},[e._v("data-name")]),e._v(" on the target element.")])]),e._v(" "),t("pre",[t("code",{pre:!0},[e._v("<html>\n<div>\n  <div id=\"el3\" :name>Hey</div>\n  <div id=\"el1\" :name('ujjwal') #fu>Hey</div>\n  <div id=\"el2\" :name(name)>Hey</div>\n</div>\n</html>\n<script>\nimport {Component, Reactive, Directive } from \"mahal\"\n\nexport default class extends Component {\n\n    @Reactive name = 'hello';\n\n    @Directive('name')\n    nameDirective(el, binding) {\n        el.setAttribute('data-name', binding.value || 'SUPER MAN');\n    }\n}\n<\/script>\n")])]),e._v(" "),t("p",[e._v("The above directive just use the "),t("code",{pre:!0},[e._v("element")]),e._v(" to set attribute on the target element. It doesn't use any life cycle.")]),e._v(" "),t("p",[t("strong",[e._v("Example2 - Let's create a highlight directive which will highlight the target element.")])]),e._v(" "),t("pre",[t("code",{pre:!0},[e._v("<html>\n<div>\n  <div id=\"el4\" :highlight>Hey</div>\n  <div id=\"el5\" :highlight('grey')>Hey</div>\n  <div id=\"el6\" :highlight('blue','red')>Hey</div>\n  <div #if(el7) id=\"el7\" :highlight(backgroundColor , 'yellow')>Hey</div>\n  <div  id=\"el8\" :highlight(backgroundColor , color )>Hey</div>\n</div>\n</html>\n<script>\nimport {Component, Reactive, Directive } from \"mahal\"\n\nexport default class extends Component {\n\n\n    @Reactive\n    backgroundColor = 'red';\n\n    @Reactive\n    color = 'blue';\n\n    @Reactive\n    el7 = true;\n\n\n    @Directive('highlight')\n    highlightDirective(el, binding, component) {\n        var isDirectiveDestoyedCalled=false;\n        function handle() {\n            // when there are multiple argument passed, params becomes array otherwise basic type.\n\n            if (binding.params.length > 1) {\n                el.style.backgroundColor = binding.value[0];\n                el.style.color = binding.value[1];\n            }\n            else {\n                el.style.backgroundColor = binding.value || 'yellow';\n                el.style.color = 'black';\n            }\n        }\n\n        handle();\n\n        return {\n            inserted:()=>{\n                console.log('element is inserted');\n            },\n            valueUpdated: handle,\n            destroyed: () => {\n                isDirectiveDestoyedCalled = true;\n            }\n        }\n    }\n\n\n}\n<\/script>\n")])])])}),[],!1,null,null,null);n.default=component.exports}}]);