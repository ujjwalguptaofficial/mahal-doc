(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{200:function(n,e,t){"use strict";t.r(e);var o={components:{Layout:t(176).a}},l=t(14),component=Object(l.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("Layout",{attrs:{title:"Dom",description:"Get started with mahal",keywords:"mahal",contentSrc:"/home/runner/work/mahal-doc/mahal-doc/content/docs/advanced/dom.md"}},[t("h1",{attrs:{id:"dom"}},[n._v("DOM")]),n._v(" "),t("p",[n._v("The component DOM is available at component "),t("code",{pre:!0},[n._v("element")]),n._v(" property. This allows you to view the DOM and also manipulate it when required in edge cases.")]),n._v(" "),t("p",[t("strong",[n._v("Note:-")]),n._v(" It is not advisable to manipulate element directly unless not possible to achieve using the declarative HTML. Manipulating element directly might have some unknown effect.")]),n._v(" "),t("pre",[t("code",{pre:!0},[n._v("<html>\n<div>\n   Hello\n</div>\n</html>\n<script>\nimport { Component } from \"mahal\"\nexport class MyComponent extends Component {\n\n   onInit(){\n       console.log('element dom', this.element);\n   }\n\n}\n<\/script>\n")])]),n._v(" "),t("h2",{attrs:{id:"ref"}},[n._v("ref")]),n._v(" "),t("p",[t("code",{pre:!0},[n._v("ref")]),n._v(" is a directive which allows you to store a DOM element in a variable. This is handy in case when you want to interact with a HTML node.")]),n._v(" "),t("pre",[t("code",{pre:!0},[n._v('<html>\n<div>\n   <div :ref(helloDiv)>Hello</div>\n</div>\n</html>\n<script>\nimport { Component } from "mahal"\nexport class MyComponent extends Component {\n\n   onInit(){\n       this.on("mount", this.mounted);\n   }\n\n   mounted(){\n     const divEl = this.helloDiv;\n   }\n\n}\n<\/script>\n')])]),n._v(" "),t("h2",{attrs:{id:"find"}},[n._v("find")]),n._v(" "),t("p",[t("code",{pre:!0},[n._v("find")]),n._v(" method can be used for querying a node inside the current component. It is similar to "),t("code",{pre:!0},[n._v("querySelector")]),n._v(".")]),n._v(" "),t("pre",[t("code",{pre:!0},[n._v("<html>\n<div>\n   <div class='hello'>Hello</div>\n</div>\n</html>\n<script>\nimport { Component } from \"mahal\"\nexport class MyComponent extends Component {\n\n   onInit(){\n       const el = this.find('.hello');\n   }\n\n}\n<\/script>\n")])]),n._v(" "),t("h2",{attrs:{id:"findall"}},[n._v("findAll")]),n._v(" "),t("p",[t("code",{pre:!0},[n._v("findAll")]),n._v(" method can be used for querying multiple node inside the current component. It is similar to "),t("code",{pre:!0},[n._v("querySelectorAll")]),n._v(".")]),n._v(" "),t("pre",[t("code",{pre:!0},[n._v("<html>\n<div>\n   <div class='hello'>Hello</div>\n   <div class='hello'>World</div>\n</div>\n</html>\n<script>\nimport { Component } from \"mahal\"\nexport class MyComponent extends Component {\n\n   onInit(){\n       const els = this.findAll('.hello');\n   }\n\n}\n<\/script>\n")])])])}),[],!1,null,null,null);e.default=component.exports}}]);